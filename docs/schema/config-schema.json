{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "NovopsConfigFile",
  "description": "Main Novops config file",
  "type": "object",
  "required": [
    "environments"
  ],
  "properties": {
    "config": {
      "description": "Global configurations for Novops and modules",
      "anyOf": [
        {
          "$ref": "#/definitions/NovopsConfig"
        },
        {
          "type": "null"
        }
      ]
    },
    "environments": {
      "description": "Source of truth defining files and variables loaded by Novops\n\nEnvironments are named uniquely (such as \"dev\", \"prod\"...) to allow for different configs to be loaded in various contexts",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/NovopsEnvironmentInput"
      }
    },
    "name": {
      "description": "Application name. Informational only.\n\nIf not specified, use current directory name",
      "type": [
        "string",
        "null"
      ]
    }
  },
  "definitions": {
    "AwsAssumeRoleInput": {
      "description": "Assume an IAM Role",
      "type": "object",
      "required": [
        "role_arn"
      ],
      "properties": {
        "role_arn": {
          "description": "Full IAM Role ARN",
          "type": "string"
        },
        "source_profile": {
          "description": "Source profile. Must exist in config.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "AwsConfig": {
      "description": "Global AWS config",
      "type": "object",
      "properties": {
        "endpoint": {
          "description": "Override endpoint for all AWS services Can be used with tools like LocalStack, for example http://localhost:4566/",
          "type": [
            "string",
            "null"
          ]
        },
        "profile": {
          "description": "AWS Profile name. Must exist locally in AWS config.\n\nIt's advised not to use this directly as profile name configuration is higly dependent on local configuration. Prefer using AWS_PROFILE environment variable where needed.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "AwsInput": {
      "type": "object",
      "required": [
        "assume_role"
      ],
      "properties": {
        "assume_role": {
          "$ref": "#/definitions/AwsAssumeRoleInput"
        }
      }
    },
    "AwsSSMParamStoreInput": {
      "description": "Reference an SSM Parameter config or secret",
      "type": "object",
      "required": [
        "aws_ssm_parameter"
      ],
      "properties": {
        "aws_ssm_parameter": {
          "$ref": "#/definitions/AwsSSMParameter"
        }
      }
    },
    "AwsSSMParameter": {
      "description": "Reference an SSM Parameter config or secret\n\nMaps directly to GetParameter API. See https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_GetParameter.html",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Parameter name",
          "type": "string"
        },
        "with_decryption": {
          "description": "Return decrypted values for secure string parameters. This flag is ignored for String and StringList parameter types.",
          "type": [
            "boolean",
            "null"
          ]
        }
      }
    },
    "AwsSecretsManagerSecret": {
      "description": "Structure to request a Secrets Manager secret\n\nMaps directly to GetSecretValue API. See https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_GetSecretValue.html",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "Secret ID",
          "type": "string"
        },
        "version_id": {
          "description": "The unique identifier of the version of the secret to retrieve.",
          "type": [
            "string",
            "null"
          ]
        },
        "version_stage": {
          "description": "The staging label of the version of the secret to retrieve.",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "AwsSecretsManagerSecretInput": {
      "description": "Reference an AWS Secret Manager secret",
      "type": "object",
      "required": [
        "aws_secret"
      ],
      "properties": {
        "aws_secret": {
          "$ref": "#/definitions/AwsSecretsManagerSecret"
        }
      }
    },
    "AzureKeyvaultSecret": {
      "description": "Maps directly to Keyvault Get Secret API\n\nSee https://learn.microsoft.com/en-us/rest/api/keyvault/secrets/get-secret/get-secret?tabs=HTTP",
      "type": "object",
      "required": [
        "name",
        "vault"
      ],
      "properties": {
        "name": {
          "description": "Secret name",
          "type": "string"
        },
        "vault": {
          "description": "Secret's vault name",
          "type": "string"
        },
        "version": {
          "description": "Secret's version (default: latest)",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "AzureKeyvaultSecretInput": {
      "description": "Reference an Azure Keyvault secret",
      "type": "object",
      "required": [
        "azure_keyvault_secret"
      ],
      "properties": {
        "azure_keyvault_secret": {
          "$ref": "#/definitions/AzureKeyvaultSecret"
        }
      }
    },
    "BitwardenEntry": {
      "description": "A BitWarden entry",
      "type": "object",
      "required": [
        "entry",
        "field"
      ],
      "properties": {
        "entry": {
          "description": "Entry name",
          "type": "string"
        },
        "field": {
          "description": "Field in entry to use as value.",
          "type": "string"
        }
      }
    },
    "BitwardenItemInput": {
      "description": "A BitWarden secret reference",
      "type": "object",
      "required": [
        "bitwarden"
      ],
      "properties": {
        "bitwarden": {
          "$ref": "#/definitions/BitwardenEntry"
        }
      }
    },
    "BytesResolvableInput": {
      "description": "Any input to be used for file content.",
      "anyOf": [
        {
          "$ref": "#/definitions/AwsSecretsManagerSecretInput"
        },
        {
          "$ref": "#/definitions/GCloudSecretManagerSecretInput"
        },
        {
          "$ref": "#/definitions/StringResolvableInput"
        }
      ]
    },
    "FileInput": {
      "type": "object",
      "required": [
        "content"
      ],
      "properties": {
        "content": {
          "description": "File content",
          "allOf": [
            {
              "$ref": "#/definitions/BytesResolvableInput"
            }
          ]
        },
        "dest": {
          "description": "Destination where file will be generated. Default to secure Novops working directory.\n\nSetting this value may prevent file from being auto-deleted as it won't be managed in a safe location and may remain indefinitely.",
          "type": [
            "string",
            "null"
          ]
        },
        "name": {
          "description": "File name to use when auto-generating file and variable name. if not set, the YAML key for file will be used",
          "type": [
            "string",
            "null"
          ]
        },
        "variable": {
          "description": "Environment variable name pointing to generated file.\n\nExample: setting `NPM_TOKEN` will output an environment variable pointing to file path such as\n\n`NPM_TOKEN: /run/user/1000/novops/dev/file_xxx`",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "GCloudSecretManagerSecret": {
      "description": "Structure to request a GCloud Secret Manager secret\n\nSee https://cloud.google.com/secret-manager/docs/reference/rest/v1/projects.secrets/get",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of the secret in the format projects/\\*\\/secrets/\\*\\/versions/\\* Such as `projects/my-org-project/secrets/my-secret/latest` Or `projects/my-org-project/secrets/my-secret/42` for a specific version",
          "type": "string"
        },
        "validate_crc32c": {
          "description": "Whether to validate crc32c checksum provided with secret (default: true)",
          "type": [
            "boolean",
            "null"
          ]
        }
      }
    },
    "GCloudSecretManagerSecretInput": {
      "description": "Reference Secret Manager secret",
      "type": "object",
      "required": [
        "gcloud_secret"
      ],
      "properties": {
        "gcloud_secret": {
          "$ref": "#/definitions/GCloudSecretManagerSecret"
        }
      }
    },
    "HashiVaultAWSInput": {
      "description": "Reference AWS Secret Engine role to generate AWS credentials as environment variables.\n\nMaps directly to Generate Credentials API. See https://developer.hashicorp.com/vault/api-docs/secret/aws#generate-credentials",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "mount": {
          "description": "Secret Engine mount point. Default to 'aws'.",
          "type": [
            "string",
            "null"
          ]
        },
        "name": {
          "description": "Vault role name",
          "type": "string"
        },
        "role_arn": {
          "description": "AWS IAM Role ARN",
          "type": [
            "string",
            "null"
          ]
        },
        "role_session_name": {
          "description": "Session name",
          "type": [
            "string",
            "null"
          ]
        },
        "ttl": {
          "description": "Generated token time to live. Example: \"3600s\"",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "HashiVaultInput": {
      "type": "object",
      "required": [
        "aws"
      ],
      "properties": {
        "aws": {
          "description": "Use Vault AWS Secret Engine to generate temporary AWS credentials.",
          "allOf": [
            {
              "$ref": "#/definitions/HashiVaultAWSInput"
            }
          ]
        }
      }
    },
    "HashiVaultKeyValueV1": {
      "description": "Reference a Key Value V1 secret",
      "type": "object",
      "required": [
        "key",
        "path"
      ],
      "properties": {
        "key": {
          "description": "Secret key to retrieve",
          "type": "string"
        },
        "mount": {
          "description": "KV v1 mount point\n\ndefault to \"kv/\"",
          "type": [
            "string",
            "null"
          ]
        },
        "path": {
          "description": "Path to secret",
          "type": "string"
        }
      }
    },
    "HashiVaultKeyValueV1Input": {
      "description": "Reference a Key Value V1 secret",
      "type": "object",
      "required": [
        "hvault_kv1"
      ],
      "properties": {
        "hvault_kv1": {
          "$ref": "#/definitions/HashiVaultKeyValueV1"
        }
      }
    },
    "HashiVaultKeyValueV2": {
      "description": "Reference a Key Value V2 secret",
      "type": "object",
      "required": [
        "key",
        "path"
      ],
      "properties": {
        "key": {
          "description": "Secret key to retrieve",
          "type": "string"
        },
        "mount": {
          "description": "KV v2 mount point\n\ndefault to \"secret/\"",
          "type": [
            "string",
            "null"
          ]
        },
        "path": {
          "description": "Path to secret",
          "type": "string"
        }
      }
    },
    "HashiVaultKeyValueV2Input": {
      "description": "Reference a Key Value V2 secret",
      "type": "object",
      "required": [
        "hvault_kv2"
      ],
      "properties": {
        "hvault_kv2": {
          "$ref": "#/definitions/HashiVaultKeyValueV2"
        }
      }
    },
    "HashivaultConfig": {
      "type": "object",
      "properties": {
        "address": {
          "description": "Address in form http(s)://HOST:PORT\n\nExample: https://vault.mycompany.org:8200",
          "type": [
            "string",
            "null"
          ]
        },
        "token": {
          "description": "Vault token as plain string\n\nUse for testing only. DO NOT COMMIT NOVOPS CONFIG WITH THIS SET.",
          "type": [
            "string",
            "null"
          ]
        },
        "token_path": {
          "description": "Vault token path.\n\nExample: /var/secrets/vault-token",
          "type": [
            "string",
            "null"
          ]
        },
        "verify": {
          "description": "Whether to enable TLS verify (true by default)",
          "type": [
            "boolean",
            "null"
          ]
        }
      }
    },
    "NovopsConfig": {
      "description": "Global Novops configuration defining behavior for modules",
      "type": "object",
      "properties": {
        "aws": {
          "description": "AWS module configs",
          "anyOf": [
            {
              "$ref": "#/definitions/AwsConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "default": {
          "description": "Novops default configurations",
          "anyOf": [
            {
              "$ref": "#/definitions/NovopsConfigDefault"
            },
            {
              "type": "null"
            }
          ]
        },
        "hashivault": {
          "description": "Hashicorp Vault module configs",
          "anyOf": [
            {
              "$ref": "#/definitions/HashivaultConfig"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "NovopsConfigDefault": {
      "type": "object",
      "properties": {
        "environment": {
          "description": "Default environment name, selected by default if no user input is provided",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "NovopsEnvironmentInput": {
      "description": "Modules to be loaded for an environment. Each module defines one or more Input which will be resolved into Outputs (files & variables)",
      "type": "object",
      "properties": {
        "aws": {
          "description": "Assume an AWS Role from local config.\n\nOutputs environment variables `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY` and `AWS_SESSION_TOKEN` with temporary credentials for IAM Role.",
          "anyOf": [
            {
              "$ref": "#/definitions/AwsInput"
            },
            {
              "type": "null"
            }
          ]
        },
        "files": {
          "description": "Files resolving to concrete files on local filesystem and environment variables pointing to file",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/FileInput"
          }
        },
        "hashivault": {
          "description": "Reference one or more Hashicorp Vault Secret Engines to generate either files or variables.",
          "anyOf": [
            {
              "$ref": "#/definitions/HashiVaultInput"
            },
            {
              "type": "null"
            }
          ]
        },
        "sops_dotenv": {
          "description": "Reference SOPS encrypted file(s) as dotenv to load variables",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/SopsDotenvInput"
          }
        },
        "variables": {
          "description": "Variables resolving to environment variables from provided source",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/VariableInput"
          }
        }
      }
    },
    "SopsDotenvInput": {
      "description": "SOPS input directly under an environment to load file content as environment variables Encrypted SOPS files must be in a valid dotenv format",
      "type": "object",
      "required": [
        "file"
      ],
      "properties": {
        "additional_flags": {
          "description": "Additional flags passed to sops",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "extract": {
          "description": "Extract a specific field via --extract flag",
          "type": [
            "string",
            "null"
          ]
        },
        "file": {
          "description": "Path to encrypted file",
          "type": "string"
        }
      }
    },
    "SopsValueFromFile": {
      "type": "object",
      "required": [
        "file"
      ],
      "properties": {
        "additional_flags": {
          "description": "Additional flags passed to sops after --decrypt --extract",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "extract": {
          "description": "Extract a specific field via --extract flag",
          "type": [
            "string",
            "null"
          ]
        },
        "file": {
          "description": "Path to encrypted file",
          "type": "string"
        }
      }
    },
    "SopsValueInput": {
      "description": "SOPS input to be used as file, variables or other kind of value input",
      "type": "object",
      "required": [
        "sops"
      ],
      "properties": {
        "sops": {
          "$ref": "#/definitions/SopsValueFromFile"
        }
      }
    },
    "StringResolvableInput": {
      "description": "All possible inputs resolving to a string value",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/BitwardenItemInput"
        },
        {
          "$ref": "#/definitions/HashiVaultKeyValueV2Input"
        },
        {
          "$ref": "#/definitions/HashiVaultKeyValueV1Input"
        },
        {
          "$ref": "#/definitions/AwsSSMParamStoreInput"
        },
        {
          "$ref": "#/definitions/AwsSecretsManagerSecretInput"
        },
        {
          "$ref": "#/definitions/GCloudSecretManagerSecretInput"
        },
        {
          "$ref": "#/definitions/AzureKeyvaultSecretInput"
        },
        {
          "$ref": "#/definitions/SopsValueInput"
        }
      ]
    },
    "VariableInput": {
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "description": "Environment variable name, such as `NPM_TOKEN`",
          "type": "string"
        },
        "quote_method": {
          "description": "Method used to quote variables using either single quote (`'`) or double quotes (`\"`).\n\nVariables are wrapped between single quotes by default to prevent any interpolation of special characters. For example a string with special characters `$\"!<>_'` will be exported as `export MYVAR='$\"!<>'\"'\"`). Only single quote character `'` is escaped as `\"'\"` so that it's interpreted as a single quote.\n\nWith double quotes, the same principle applies except double quotes `\"` are exported as `'\"'`. While it may be practical in some situations to leverage interpolation, it may represent a risk as interpolation can cause unwanted behavior. For example string `(rm /tmp/important_file)` would be loaded as `export MYVAR=\"$(rm /tmp/important_file)\"`.\n\nOnly use double quote from trusted source.",
          "type": [
            "string",
            "null"
          ]
        },
        "value": {
          "description": "Source of truth for variable",
          "allOf": [
            {
              "$ref": "#/definitions/StringResolvableInput"
            }
          ]
        }
      }
    }
  }
}
